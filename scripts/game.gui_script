function init(self)
	-- hide self
	msg.post(".", "disable")
	
	-- Define GUI variables
	self.level = 0
	self.score = 0
	self.score_node = gui.get_node("score")
	self.level_node = gui.get_node("level")

	-- set scene blue background
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.094, 0.113, 0.227, 0) } )
	-- msg.post(".", "acquire_input_focus")
end

local function scale_down(self, node)
	local s = 1.0
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_OUT, 0.05)
end 

function on_input(self, action_id, action)
	-- I have no idea what these two do; These are taken from main.do which existed before
	if action_id == hash("ok") and action.pressed then
		print('OK')
	elseif action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end

--[[ Messages:
- add_score: {amount}
- add_level
--]]
function on_message(self, message_id, message, sender)
	if message_id == hash("add_score") then
		self.score = self.score + message.amount
		gui.set_text(self.score_node, "Score: "..tostring(self.score))
		local s = 1.2
		gui.animate(self.score_node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_OUT, 0.1, 0.0, scale_down)
	end
end

--[[

self.w = tonumber(sys.get_config("display.width"))
self.h = tonumber(sys.get_config("display.height"))

local function clear_lives(self)
	-- delete all cloned nodes
	for i=1,self.lives do
		local n = gui.get_node("life_" .. i)
		gui.delete_node(n)
	end
end

local function set_lives(self, lives)
	if self.lives > 0 then
		clear_lives(self)
	end

	self.lives = lives
	-- we use an off screen node as template by cloning it
	local template = gui.get_node("life")

	for i=1,self.lives do
		-- one clone for each life
		local new = gui.clone(template)
		-- set the node id so we can find and delete them later
		gui.set_id(new, "life_" .. i)
		-- line them up
		local pos = gui.get_position(new)
		pos.x = 20 + i * 40
		gui.set_position(new, pos)
	end
end

function init(self)
	local n1 = gui.get_node("get_ready")
	local n2 = gui.get_node("game_over")
	gui.set_enabled(n1, false)
	gui.set_enabled(n2, false)
	self.lives = 0
end

local function getready(self)
	if self.getready then
		local n = gui.get_node("get_ready")
		msg.post("#get_ready", "play_sound")
		gui.animate(n, "color.w", 1, gui.EASING_INOUTQUINT, 0.3, 0, getready, gui.PLAYBACK_ONCE_PINGPONG)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("get_ready") then
		local n = gui.get_node("score")
		gui.set_enabled(n, true)
		local n = gui.get_node("get_ready")
		gui.set_enabled(n, true)
		gui.set_color(n, vmath.vector4(1, 1, 1, 0))
		self.getready = true
		getready(self)
	elseif message_id == hash("go") then
		local n = gui.get_node("score")
		gui.set_enabled(n, true)
		local n = gui.get_node("get_ready")
		gui.set_enabled(n, false)
		msg.post("#go", "play_sound")                
	elseif message_id == hash("set_lives") then
		set_lives(self, message.lives)
	elseif message_id == hash("set_score") then
		local n = gui.get_node("score")
		-- format score like: 000456 with leading zeros
		gui.set_text(n, string.format("%06d", message.score))
	elseif message_id == hash("game_over") then
		local n = gui.get_node("game_over")
		gui.set_enabled(n, true)
		msg.post("#game_over", "play_sound")
	end
end

--]]