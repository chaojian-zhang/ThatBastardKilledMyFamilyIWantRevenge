-- Player Script, responsible for player inputs, damage calculation, player state management, and communication with gamemanager
-- This script receives following messages:
--	- start_level: used in starting a level, play start level animation
--	- fire: start firing
--	- cease_fire: stop firing
--	- 

go.property("game_manager", msg.url("#"))
-- go.property("player_start_position", vmath.vector3(360, 0, 0))
go.property("max_movement_speed", 200)
go.property("min_boundary_x", 10)	-- This should be related to display size
go.property("max_boundary_x", 710)	-- This should be related to display size
go.property("min_boundary_y", 10)	-- This should be related to display size
go.property("max_boundary_y", 1270)	-- This should be related to display size
go.property("sway", 5)
go.property("current_weapon", msg.url("#simple_bullet_factory"))
go.property("firing_offset_position", vmath.vector3())

function init(self)
	-- Let the script receive input from the player
	msg.post(".", "acquire_input_focus")
	msg.post(".", "disable")	-- default disable
	
	-- the current speed (and direction) of the space ship
	self.dir = vmath.vector3()
	self.moving = false
	self.firing = false 
	self.player_start_position = go.get_position() -- Just use whatever position inside the editor
	
	-- Animate the ship so it's swaying back and forth
	go.set(".", "euler.z", -self.sway)
	go.animate(".", "euler.z", go.PLAYBACK_LOOP_PINGPONG, self.sway, go.EASING_INOUTSINE, 2) -- last parameter is animation duration
end

function update(self, dt)
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.max_movement_speed * dt
		if pos.x < self.min_boundary_x then
			pos.x = self.min_boundary_x
		elseif pos.x > self.max_boundary_x then
			pos.x = self.max_boundary_x
		elseif pos.y < self.min_boundary_y then
			pos.y = self.min_boundary_y
		elseif pos.y > self.max_boundary_y then
			pos.y = self.max_boundary_y
		end
		go.set_position(pos)
	end

	-- Fire rockets
	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)    -- Andle in radians
		local rot = vmath.quat_rotation_z(angle)            -- factory.create expects a quat
		-- Usually bullet direction is straight up and not relavent to orientation
		-- factory.create(self.current_weapon, self.firing_offset_position + go.get_position(), vmath.quat_rotation_z(0), { dir = self.dir })
		factory.create(self.current_weapon, self.firing_offset_position + go.get_position())
	end

	-- Reset inputs
	self.moving = false
	self.dir = vmath.vector3()
	self.firing = false
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.dir.y = 1
	elseif action_id == hash("down") then 
		self.dir.y = -1
	elseif action_id == hash("left") then
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.dir.x = 1
	elseif action_id == hash("fire") and action.pressed then
		self.firing = true
	end

	-- normalize
	if vmath.length(self.dir) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.dir)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_level") then
		print("start level")
		-- enable self
		msg.post(".", "enable")
		-- reset player location		
		go.set_position(self.player_start_position)
		-- play level entrance animation
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, 150, go.EASING_OUTCUBIC, 1.25)	-- Easing Options: https://www.defold.com/manuals/animation/
	end
end