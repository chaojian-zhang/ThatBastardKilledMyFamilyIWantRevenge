-- Player Script, responsible for player inputs, damage calculation, player state management, and communication with gamemanager
-- This script receives following messages:
--	- start_level: used in starting a level, play start level animation
--	- start_fire: start firing; From GUI
--	- cease_fire: stop firing; From GUI
--  - move: move player; From GUI; accepts message parameter dir, no need to be normalized (and don't do that because we will normalize it anyway)
--	- update_weapon [weapon_url, weapon_damage, cool_down]: update weapon cool down

go.property("game_manager", msg.url("/gamemanager"))
-- go.property("player_start_position", vmath.vector3(360, 0, 0))
go.property("max_movement_speed", 200)	-- 500 is good, very easy to die, very smooth navigation
go.property("min_boundary_x", 10)	-- This should be related to display size
go.property("max_boundary_x", 710)	-- This should be related to display size
go.property("min_boundary_y", 10)	-- This should be related to display size
go.property("max_boundary_y", 1270)	-- This should be related to display size
go.property("sway", 5)
go.property("current_weapon", msg.url("#simple_bullet_factory"))
go.property("current_weapon_cooldown", 0.12)
go.property("firing_offset_position", vmath.vector3())

--- local function
local function attempt_fire(self)
	-- if weapon_cooldown has not reached then don't fire
	if self.weapon_cooldown > 0 then
		return
	end 

	-- play sound once
	msg.post("#fire_sound", "play_sound")

	-- Fire weapon once
	local angle = math.atan2(self.dir.y, self.dir.x)    -- Angle in radians
	local rot = vmath.quat_rotation_z(angle)            -- factory.create expects a quat
	-- Usually bullet direction is straight up and not relavent to orientation
	-- factory.create(self.current_weapon, self.firing_offset_position + go.get_position(), vmath.quat_rotation_z(0), { dir = self.dir })
	factory.create(self.current_weapon, self.firing_offset_position + go.get_position())

	self.weapon_cooldown = self.current_weapon_cooldown
end

local function reinitialize(self)
	-- the current speed (and direction) of the space ship
	self.dir = vmath.vector3()
	self.moving = false
	self.started = false		-- whether level has started and whether we are allowed to act (e.g. in case of level animations and deaths we might not want player to move)
	self.weapon_cooldown = 0	-- Controls weapon cool down and also firing weapon sound gating
	self.firing = false 		-- GUI signal, used to indicate whether player is pressing the firing button
end

--- runtime events
function init(self)
	msg.post(".", "disable")	-- default disable
	
	-- fetch initial values
	self.player_start_position = go.get_position() -- Just use whatever position inside the editor

	-- initialize
	reinitialize(self)
	
	-- Animate the ship so it's swaying back and forth
	go.set(".", "euler.z", -self.sway)
	go.animate(".", "euler.z", go.PLAYBACK_LOOP_PINGPONG, self.sway, go.EASING_INOUTSINE, 2) -- last parameter is animation duration
end

function update(self, dt)
	if self.started == false then return end
	
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.max_movement_speed * dt
		if pos.x < self.min_boundary_x then
			pos.x = self.min_boundary_x
		elseif pos.x > self.max_boundary_x then
			pos.x = self.max_boundary_x
		elseif pos.y < self.min_boundary_y then
			pos.y = self.min_boundary_y
		elseif pos.y > self.max_boundary_y then
			pos.y = self.max_boundary_y
		end
		go.set_position(pos)
	end

	-- Decrement timings
	self.weapon_cooldown = self.weapon_cooldown - dt

	-- Reset inputs
	self.moving = false
	self.dir = vmath.vector3()
end

function on_input(self, action_id, action)
	if self.started == false then return end
	
	if action_id == hash("up") then
		self.dir.y = 1
	elseif action_id == hash("down") then 
		self.dir.y = -1
	elseif action_id == hash("left") then
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.dir.x = 1
	elseif action_id == hash("fire") then -- notice we are not checking action.pressed so it automatically handles continuous firing
		attempt_fire(self)
	elseif action_id == hash("click") then
		-- attempt_fire(self)
	elseif action_id == hash("touch") and self.firing == true then
		attempt_fire(self)
	end

	-- normalize
	if vmath.length(self.dir) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.dir)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_level") then
		msg.post(".", "acquire_input_focus")
		self.started = true
		-- enable self
		msg.post(".", "enable")
		-- select aircraft
		msg.post("#sprite", "play_animation", { id = message.aircraft})
		-- reset player location		
		go.set_position(self.player_start_position)
		-- play level entrance animation
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, 150, go.EASING_OUTCUBIC, 1.25)
	elseif message_id == hash("start_fire") then
		self.firing = true
	elseif message_id == hash("cease_fire") then
		self.firing = false
	elseif message_id == hash("move") then
		self.dir = message.dir
		
		-- normalize
		if vmath.length(self.dir) > 0 then
			self.moving = true
			self.dir = vmath.normalize(self.dir)
		end
	elseif message_id == hash("collision_response") then
		if self.started == true then 
			-- temporarily disable self for future hit
			self.started = false
			-- play explosion animation
			msg.post("#sprite", "play_animation", { id = hash("aircraft_explosion")})
			-- play explosion sound
			msg.post("#extinguish_sound", "play_sound")
		end
	elseif message_id == hash("animation_done") then -- handles finishing playing explosion animation
		-- hit response: notify GM of hit after we have finished animation
		msg.post(self.game_manager, "player_got_hit")
		-- hide self's components
		msg.post(".", "disable")
	end
end