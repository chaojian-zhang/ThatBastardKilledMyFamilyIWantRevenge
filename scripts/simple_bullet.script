-- Bullet types/Firing modes:
-- - Durable/Non-Durable: Until hit or out of map vs timed-life
-- - Physical/Laser: Flying vs Straight instant
-- - Explosive/Simple Hit: Explosion Effect vs no effect
-- - Spread/Single: 
-- - Continuous/Slow: determined by firing frequency

-- Requires
-- - Collision
-- - Particle

go.property("speed", 800)
go.property("life", 10)					-- For long-lasting weapons there is no termination life; Otherwise use 1 second
go.property("frequency", 10)
go.property("damage", 1)
go.property("game_gui", msg.url("main#gui"))

--- Actions
local function explode(self)
	self.life = 1000
	go.set_rotation(vmath.quat())
	self.speed = 0
	msg.post("#sprite", "play_animation", { id = hash("explosion") })
end

-- runtime events
function init(self)
	-- rotate the velocity vector to our orientation.
	self.velocity = vmath.rotate(go.get_rotation(), vmath.vector3(0, 1, 0))
	self.screen_width = tonumber(sys.get_config("display.width"))
	self.screen_height = tonumber(sys.get_config("display.height"))
end

function update(self, dt)
	local pos = go.get_position()
	pos = pos + self.velocity * self.speed * dt
	go.set_position(pos)

	self.life = self.life - dt
	if self.life < 0 then
		explode(self)
	end

	if pos.x < 0 or pos.x > self.screen_width or pos.y < 0 or pos.y > self.screen_height then
		-- delete the shot when it has travelled off screen.
		go.delete()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("animation_done") then  -- This message is sent to the sender of a "play_animation" message on sprite:
		--  when the animation has completed
		go.delete()                                
	elseif message_id == hash("collision_response") then
		-- explode(self)
		-- msg.post(self.game_gui, "add_score", {amount = score})
		particlefx.play("#particle")
		msg.post(message.other_id, "take_damage", {damage = self.damage}) -- go.delete(message.other_id)
		-- msg.post("/gui#ui", "add_score", { score = 100 }) -- Post a message named "add_score" to the component "ui" in the game object named "gui" at the root of the main collection
		go.delete()
	end	
end